# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    api_and_version_path_prefix: 'api/v1'
    api_doc_server_url: '%env(API_DOC_SERVER_URL)%'
    api_doc_server_url_with_prefix: '%api_doc_server_url%/%api_and_version_path_prefix%'
    api_doctrine_cache_directory_path: '%kernel.cache_dir%/doctrine/app_cache'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        # add globally Doctrine adapter as tag aware adapter
        bind:
            $doctrineCache: '@app.cache.doctrine_tag_aware_adapter'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # add Doctrine cache warmer to enable SQLite cache database
    App\Services\API\Cache\DoctrineCacheWarmer:
        tags:
            - { name: kernel.cache_warmer, priority: 0 }

    # add listener to invalidate cache for collection list results after operations on a particular entity.
    App\Services\API\Event\Subscriber\DoctrineSubscriber:
        tags:
            - { name: doctrine.event_subscriber }

    # add exception listener with monolog API logs with a particular "api" channel
    App\Services\API\Event\Listener\ExceptionListener:
        arguments:
            $logger: '@monolog.logger.api'
        tags:
            - { name: kernel.event_listener, event: kernel.exception, method: onKernelException }

    # add request listener
    App\Services\API\Event\Listener\RequestListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }

    # add custom param converter to manage Doctrine cache for GET query and result for a single entity
    App\Services\API\ParamConverter\DoctrineCacheConverter:
        tags:
            - { name: request.param_converter, converter: doctrine.cache.custom_converter, priority: 1 }

    # add custom param converter to manage HTTP cache for GET request on Collection or single representation result
    App\Services\API\ParamConverter\HTTPCacheConverter:
        arguments:
            # Precise which kind of token extractor must be used to get JWT
            $tokenExtractor: '@lexik_jwt_authentication.extractor.authorization_header_extractor'
        tags:
            - { name: request.param_converter, converter: http.cache.custom_converter, priority: 0 }

    # add JMS event subscriber for hateoas collection representation
    App\Services\Hateoas\Event\Subscriber\CollectionRepresentationSubscriber:
        tags:
            - jms_serializer.event_subscriber

    # add a Lexik listener to customise JWT payload
    App\Services\Lexik\Event\Listener\JWTCreatedListener:
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created }

    # add a JMS object constructor to enforce use of entity constructor for deserialization
    jms_serializer.unserialize_object_constructor:
        alias: jms_serializer.unserialize_object_constructor.custom
    jms_serializer.unserialize_object_constructor.custom:
        class: App\Services\JMS\EntityConstruction\ObjectConstructor